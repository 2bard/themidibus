From 9f4a3f5810dc9f575db3b94e045e40e5ed753e08 Mon Sep 17 00:00:00 2001
From: Marc Koderer <marc@koderer.com>
Date: Sat, 27 Apr 2013 06:55:55 +0200
Subject: [PATCH] Introducing a new class Note which represents a
 pressed/released key.

Added javadoc, example and code
---
 CHANGELOG.txt                                      |   2 +
 build.xml                                          |   4 -
 .../AdvancedMIDIMessageIO.pde                      |   2 +-
 examples/BasicWithNoteClass/BasicWithNoteClass.pde |  38 ++++
 src/themidibus/MidiBus.java                        |  35 +++-
 src/themidibus/Note.java                           | 198 +++++++++++++++++++++
 src/themidibus/PApplet.java                        |  22 +++
 src/themidibus/SimpleMidiListener.java             |  14 ++
 8 files changed, 309 insertions(+), 6 deletions(-)
 create mode 100644 examples/BasicWithNoteClass/BasicWithNoteClass.pde
 create mode 100644 src/themidibus/Note.java

diff --git a/CHANGELOG.txt b/CHANGELOG.txt
index 110845e..10a4add 100644
--- a/CHANGELOG.txt
+++ b/CHANGELOG.txt
@@ -2,12 +2,14 @@
 
   Changes:
     -Added constructors to MidiBus which allow parent as Object, for use outside of Processing
+    -Introduce a new class called Note which represents a pressed/release key
   ToDo:
     -Constructors are redundant deprecate non Object constructors
     -Support changes to Processing 2.0 event handling/register
     -Explicitly support third party MIDI subsystem if possible (MMJ?)
     -Improve startup speed if possible
     -Migrate web page to GitHub Pages
+    -Use Note class to send a key
 
 -Version 005
   
diff --git a/build.xml b/build.xml
index 5784ad3..3547d31 100644
--- a/build.xml
+++ b/build.xml
@@ -7,7 +7,6 @@
 
 	<property name="core.dir" value="/Applications/Processing.app/Contents/Resources/Java/"/>
 	<property name="core-lib.dir" value="/Applications/Processing.app/Contents/Resources/Java/"/>
-	<property name="contrib-lib.dir" value="/Users/sparky/Projects/processing/libraries/"/>
 
 	<property name="src.dir" value="src"/>
 	<property name="build.dir" value="bin"/>
@@ -20,9 +19,6 @@
 		<fileset dir="${core-lib.dir}">
 			<include name="**/*.jar"/>
 		</fileset>
-		<fileset dir="${contrib-lib.dir}">
-			<include name="**/*.jar"/>
-		</fileset>
 	</path>
 
 	<target name="clean">
diff --git a/examples/AdvancedMIDIMessageIO/AdvancedMIDIMessageIO.pde b/examples/AdvancedMIDIMessageIO/AdvancedMIDIMessageIO.pde
index 4883de8..aacc203 100644
--- a/examples/AdvancedMIDIMessageIO/AdvancedMIDIMessageIO.pde
+++ b/examples/AdvancedMIDIMessageIO/AdvancedMIDIMessageIO.pde
@@ -78,7 +78,7 @@ void rawMidi(byte[] data) { // You can also use rawMidi(byte[] data, String bus_
   }
 }
 
-void midiMessage(MidiMessage message) { // You can also use midiMessage(MidiMessage message, String bus_name)
+void midiMessage(MidiMessage message) { // You can also use midiMessage(MidiMessage message, long timestamp, String bus_name)
   // Receive a MidiMessage
   // MidiMessage is an abstract class, the actual passed object will be either javax.sound.midi.MetaMessage, javax.sound.midi.ShortMessage, javax.sound.midi.SysexMessage.
   // Check it out here http://java.sun.com/j2se/1.5.0/docs/api/javax/sound/midi/package-summary.html
diff --git a/examples/BasicWithNoteClass/BasicWithNoteClass.pde b/examples/BasicWithNoteClass/BasicWithNoteClass.pde
new file mode 100644
index 0000000..03db9c9
--- /dev/null
+++ b/examples/BasicWithNoteClass/BasicWithNoteClass.pde
@@ -0,0 +1,38 @@
+import themidibus.*; //Import the library
+import javax.sound.midi.MidiMessage; //Import the MidiMessage classes http://java.sun.com/j2se/1.5.0/docs/api/javax/sound/midi/MidiMessage.html
+import javax.sound.midi.SysexMessage;
+import javax.sound.midi.ShortMessage;
+
+MidiBus myBus; // The MidiBus
+
+void setup() {
+  MidiBus.list(); // List all available Midi devices on STDOUT. This will show each device's index and name.
+  myBus = new MidiBus(this, 0, 0); // Create a new MidiBus object
+}
+
+void draw(){}
+
+void noteOn(Note nt){
+  println ("Note pressed: " + nt.toString());
+  println ("Octave: " + nt.getOctave());
+  println ("Strength: " + nt.getStrength());
+  
+  if (nt.equals("C#")){
+    println("It's a C#!!");
+  }
+  
+  if (nt.equals("D#5")){
+    println("It's a D#!!");
+  }
+}
+
+  void noteOff(Note nt){
+    println ("Note release: " + nt.toString());
+    println ("Octave: " + nt.getOctave());
+    println ("Strength: " + nt.getStrength());
+  }
+
+void delay(int time) {
+  int current = millis();
+  while(millis() < current+time) Thread.yield();
+}
\ No newline at end of file
diff --git a/src/themidibus/MidiBus.java b/src/themidibus/MidiBus.java
index 6444541..88b8bf1 100644
--- a/src/themidibus/MidiBus.java
+++ b/src/themidibus/MidiBus.java
@@ -53,7 +53,7 @@ public class MidiBus {
 	
 	Object parent;
 		
-	Method method_note_on, method_note_off, method_controller_change, method_raw_midi, method_midi_message;
+	Method method_note_on, method_note_off, method_note_on_wcla, method_note_off_wcla, method_controller_change, method_raw_midi, method_midi_message;
 	Method method_note_on_with_bus_name, method_note_off_with_bus_name, method_controller_change_with_bus_name, method_raw_midi_with_bus_name, method_midi_message_with_bus_name;
 	
 	/* -- Constructors -- */
@@ -963,6 +963,17 @@ public class MidiBus {
 					e.printStackTrace();
 					method_note_on = null;
 				}
+			
+			}
+			if(method_note_on_wcla != null){
+				try {
+					Note nt = new Note ((int)(data[1] & 0xFF), (int)(data[2] & 0xFF), timeStamp);
+					method_note_on_wcla.invoke(parent, nt);
+				} catch(Exception e) {
+					System.err.println("\nThe MidiBus Warning: Disabling noteOn(Note note) because an unkown exception was thrown and caught");
+					e.printStackTrace();
+					method_note_on_wcla = null;
+				}
 			}
 			if(method_note_on_with_bus_name != null) {
 				try {
@@ -992,6 +1003,16 @@ public class MidiBus {
 					method_note_off_with_bus_name = null;
 				}
 			}
+			if(method_note_off_wcla != null){
+				try {
+					Note nt = new Note ((int)(data[1] & 0xFF), (int)(data[2] & 0xFF), timeStamp);
+					method_note_off_wcla.invoke(parent, nt);
+				} catch(Exception e) {
+					System.err.println("\nThe MidiBus Warning: Disabling noteOff(Note note) because an unkown exception was thrown and caught");
+					e.printStackTrace();
+					method_note_off_wcla = null;
+				}
+			}
 		} else if((int)((byte)data[0] & 0xF0) == ShortMessage.CONTROL_CHANGE) {
 			if(method_controller_change != null) {
 				try {
@@ -1104,6 +1125,18 @@ public class MidiBus {
 			} catch(Exception e) {
 				// no such method, or an error.. which is fine, just ignore
 			}
+			
+			try {
+				method_note_on_wcla = parent.getClass().getMethod("noteOn", new Class[] { Note.class});
+			} catch(Exception e) {
+				// no such method, or an error.. which is fine, just ignore
+			}
+			
+			try {
+				method_note_off_wcla = parent.getClass().getMethod("noteOff", new Class[] { Note.class });
+			} catch(Exception e) {
+				// no such method, or an error.. which is fine, just ignore
+			}
 
 			try {
 				method_controller_change = parent.getClass().getMethod("controllerChange", new Class[] { Integer.TYPE, Integer.TYPE, Integer.TYPE });
diff --git a/src/themidibus/Note.java b/src/themidibus/Note.java
new file mode 100644
index 0000000..af7f939
--- /dev/null
+++ b/src/themidibus/Note.java
@@ -0,0 +1,198 @@
+package themidibus;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * The Note class represents a pressed or released key.
+ * <p>
+ * Function {@link themidibus.SimpleMidiListener#noteOn(Note)} and
+ * {@link themidibus.SimpleMidiListener#noteOff(Note)} will create such an
+ * object.
+ * 
+ * @version 006
+ * @author Marc Koderer
+ * @see MidiBus
+ * @see SimpleMidiListener
+ */
+
+public class Note {
+
+	private static final Map<Integer, String> PitchMap = Collections
+			.unmodifiableMap(new HashMap<Integer, String>() {
+				private static final long serialVersionUID = 1L;
+				{
+					put(0, "C");
+					put(1, "C#");
+					put(2, "D");
+					put(3, "D#");
+					put(4, "E");
+					put(5, "F");
+					put(6, "F#");
+					put(7, "G");
+					put(8, "G#");
+					put(9, "A");
+					put(10, "A#");
+					put(11, "B");
+				}
+			});
+
+	String note;
+	int pitch;
+	int octave;
+	int strength;
+	long ticks;
+
+	/**
+	 * Constructs a Note object
+	 * 
+	 */
+	public Note() {
+	}
+
+	/**
+	 * Constructs a Note object
+	 * 
+	 * @param pitch
+	 *            The key number
+	 * @param strength
+	 *            The strength the key was pressed
+	 * @param ticks
+	 *            Time ticks
+	 */
+	public Note(int pitch, int strength, long ticks) {
+		setPitch(pitch);
+		this.strength = strength;
+		this.ticks = ticks;
+	}
+
+	/***
+	 * Set pitch and calculates the note and octave
+	 * 
+	 * @param pitch
+	 */
+	public void setPitch(int pitch) {
+		this.note = PitchMap.get(pitch % 12);
+		this.octave = pitch / 12;
+		this.pitch = pitch;
+	}
+
+	/***
+	 * 
+	 * @return The string representation of the note
+	 */
+	public String getNote() {
+		return note;
+	}
+
+	/**
+	 * 
+	 * @return the pitch
+	 */
+	public int getPitch() {
+		return pitch;
+	}
+
+	/**
+	 * 
+	 * @return The Octave of the pressed/released key
+	 */
+	public int getOctave() {
+		return octave;
+	}
+
+	/**
+	 * 
+	 * @return The strength (max. 127)
+	 */
+	public int getStrength() {
+		return strength;
+	}
+
+	/**
+	 * Sets the strength
+	 * 
+	 * @param strength
+	 */
+	public void setStrength(int strength) {
+		this.strength = strength;
+	}
+
+	/**
+	 * 
+	 * @return the time ticks of the action
+	 */
+	public long getTicks() {
+		return ticks;
+	}
+
+	/**
+	 * 
+	 * @param ticks
+	 *            sets the time ticks
+	 */
+	public void setTicks(long ticks) {
+		this.ticks = ticks;
+	}
+
+	/**
+	 * Returns the string representation of the note and the octave Like: C#4
+	 */
+	@Override
+	public String toString() {
+		return note + octave;
+	}
+
+	@Override
+	public int hashCode() {
+		final int prime = 31;
+		int result = 1;
+		result = prime * result + ((note == null) ? 0 : note.hashCode());
+		result = prime * result + octave;
+		return result;
+	}
+
+	/**
+	 * Can be used to compare note objects
+	 */
+	@Override
+	public boolean equals(Object obj) {
+		if (this == obj)
+			return true;
+		if (obj == null)
+			return false;
+		if (getClass() != obj.getClass())
+			return false;
+		Note other = (Note) obj;
+		if (note == null) {
+			if (other.note != null)
+				return false;
+		} else if (!note.equals(other.note))
+			return false;
+		if (octave != other.octave)
+			return false;
+		return true;
+	}
+
+	/**
+	 * Can be used to compare Strings with notes: 
+	 * <p>note.equals("C#") or 
+	 * note.equals("C#4);
+	 * are both valid.
+	 * 
+	 * @param string The string value
+	 * @return true/false
+	 */
+	public boolean equals(String string) {
+		if (string == null)
+			return false;
+		if (this.toString().equals(string)) {
+			return true;
+		} else if (this.note.equals(string)) {
+			return true;
+		}
+		return false;
+	}
+
+}
diff --git a/src/themidibus/PApplet.java b/src/themidibus/PApplet.java
index 61c8451..b40f1b9 100644
--- a/src/themidibus/PApplet.java
+++ b/src/themidibus/PApplet.java
@@ -82,6 +82,17 @@ public class PApplet{
 	}
 	
 	/**
+	 * Is passes a Note object representing the released key 
+	 * 
+	 * @param Note the Note object
+	 * @see #noteOff(int channel, int pitch, int velocity)
+	 * @see themidibus.SimpleMidiListener#noteOff(Note)
+	*/
+	public void noteOff(Note nt) {
+		
+	}
+	
+	/**
 	 * Is passed the channel, pitch and velocity associated with every new NoteOff MIDI message recieved by a MidiBus attached to this applet.
 	 *
 	 * @param channel the channel on which the NoteOff arrived
@@ -119,6 +130,17 @@ public class PApplet{
 	}
 	
 	/**
+	 * Is passes a Note object representing the pressed key 
+	 * 
+	 * @param Note the Note object
+	 * @see #noteOn(int channel, int pitch, int velocity)
+	 * @see themidibus.SimpleMidiListener#noteOff(Note)
+	*/
+	public void noteOn(Note nt) {
+		
+	}
+	
+	/**
 	 * Is passed the channel, pitch and velocity associated with every new NoteOn MIDI message recieved by a MidiBus attached to this applet and the name of the MidiBus which recieved the message.
 	 *
 	 * @param channel the channel on which the NoteOn arrived
diff --git a/src/themidibus/SimpleMidiListener.java b/src/themidibus/SimpleMidiListener.java
index bf360a8..5a0ae89 100644
--- a/src/themidibus/SimpleMidiListener.java
+++ b/src/themidibus/SimpleMidiListener.java
@@ -42,6 +42,13 @@ public interface SimpleMidiListener extends MidiListener {
 	public void noteOn(int channel, int pitch, int velocity);
 	
 	/**
+	 * Objects notifying this SimpleMidiListener of a new NoteOn MIDI message call this method.
+	 * 
+	 * @param note an object holding all information of the pressed note
+	*/
+	public void noteOn(Note note);
+	
+	/**
 	 * Objects notifying this SimpleMidiListener of a new NoteOff MIDI message call this method.
 	 * 
 	 * @param channel the channel on which the NoteOff arrived
@@ -51,6 +58,13 @@ public interface SimpleMidiListener extends MidiListener {
 	public void noteOff(int channel, int pitch, int velocity);
 	
 	/**
+	 * Objects notifying this SimpleMidiListener of a new NoteOn MIDI message call this method.
+	 * 
+	 * @param note an object holding all information of the released note
+	*/
+	public void noteOff(Note note);
+	
+	/**
 	 * Objects notifying this SimpleMidiListener of a new ControllerChange MIDI message call this method.
 	 * 
 	 * @param channel the channel on which the ContollerChange arrived
-- 
1.8.2

